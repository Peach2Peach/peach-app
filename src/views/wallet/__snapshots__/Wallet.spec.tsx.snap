// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Wallet should render correctly 1`] = `
<View
  style={
    [
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "paddingLeft": 16,
        "paddingRight": 16,
      },
      {
        "paddingLeft": 32,
        "paddingRight": 32,
      },
    ]
  }
>
  <ForwardRef
    contentContainerStyle={
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
      }
    }
    contentStyle={
      {
        "alignItems": "center",
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "gap": 64,
        "justifyContent": "center",
      }
    }
    refreshControl={
      <RefreshControlMock
        onRefresh={[MockFunction]}
        refreshing={false}
        style={
          {
            "opacity": 0,
          }
        }
      />
    }
    style={
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "height": "100%",
      }
    }
  >
    <TotalBalance
      isRefreshing={false}
    />
    <SendTo
      address="address"
      addressErrors=""
      setAddress={[MockFunction]}
    />
  </ForwardRef>
  <ConfirmSendAllTo
    address="address"
    disabled={true}
    onSuccess={[Function]}
    style={
      {
        "alignSelf": "center",
        "marginBottom": 20,
      }
    }
  />
</View>
`;

exports[`Wallet should render correctly user can withdraw 1`] = `
<View
  style={
    [
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "paddingLeft": 16,
        "paddingRight": 16,
      },
      {
        "paddingLeft": 32,
        "paddingRight": 32,
      },
    ]
  }
>
  <ForwardRef
    contentContainerStyle={
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
      }
    }
    contentStyle={
      {
        "alignItems": "center",
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "gap": 64,
        "justifyContent": "center",
      }
    }
    refreshControl={
      <RefreshControlMock
        onRefresh={[MockFunction]}
        refreshing={false}
        style={
          {
            "opacity": 0,
          }
        }
      />
    }
    style={
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "height": "100%",
      }
    }
  >
    <TotalBalance
      isRefreshing={false}
    />
    <SendTo
      address="address"
      addressErrors=""
      setAddress={[MockFunction]}
    />
  </ForwardRef>
  <ConfirmSendAllTo
    address="address"
    disabled={false}
    onSuccess={[Function]}
    style={
      {
        "alignSelf": "center",
        "marginBottom": 20,
      }
    }
  />
</View>
`;

exports[`Wallet should render correctly when loading 1`] = `
<BitcoinLoading
  text="wallet loading,
one sec..."
/>
`;

exports[`Wallet should render correctly when refreshing 1`] = `
<View
  style={
    [
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "paddingLeft": 16,
        "paddingRight": 16,
      },
      {
        "paddingLeft": 32,
        "paddingRight": 32,
      },
    ]
  }
>
  <ForwardRef
    contentContainerStyle={
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
      }
    }
    contentStyle={
      {
        "alignItems": "center",
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "gap": 64,
        "justifyContent": "center",
      }
    }
    refreshControl={
      <RefreshControlMock
        onRefresh={[MockFunction]}
        refreshing={false}
        style={
          {
            "opacity": 0,
          }
        }
      />
    }
    style={
      {
        "flexBasis": "0%",
        "flexGrow": 1,
        "flexShrink": 1,
        "height": "100%",
      }
    }
  >
    <TotalBalance
      isRefreshing={true}
    />
    <SendTo
      address="address"
      addressErrors=""
      setAddress={[MockFunction]}
    />
  </ForwardRef>
  <ConfirmSendAllTo
    address="address"
    disabled={true}
    onSuccess={[Function]}
    style={
      {
        "alignSelf": "center",
        "marginBottom": 20,
      }
    }
  />
</View>
`;
