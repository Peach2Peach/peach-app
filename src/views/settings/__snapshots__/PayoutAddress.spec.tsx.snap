// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PayoutAddress should render correctly 1`] = `
<Screen
  header={<PayoutAddressHeader />}
>
  <ForwardRef
    contentContainerStyle={
      {
        "alignItems": "center",
        "flexGrow": 1,
        "justifyContent": "center",
        "paddingLeft": 32,
        "paddingRight": 32,
      }
    }
  >
    <PeachText
      style={
        {
          "fontFamily": "Baloo2-Bold",
          "fontSize": 20,
          "letterSpacing": 0.2,
          "lineHeight": 32,
          "textAlign": "center",
        }
      }
    >
      set custom address
    </PeachText>
    <Input
      errorMessage=""
      onChange={[MockFunction]}
      placeholder="address label"
      style={
        {
          "marginTop": 16,
        }
      }
      value="addressLabel"
    />
    <BitcoinAddressInput
      errorMessage=""
      onChange={[MockFunction]}
      value="address"
    />
    <OpenWallet
      address="address"
      style={
        {
          "height": 24,
        }
      }
    />
  </ForwardRef>
  <PrimaryButton
    disabled={false}
    narrow={true}
    onPress={[MockFunction]}
    style={
      {
        "alignSelf": "center",
      }
    }
  >
    confirm
  </PrimaryButton>
</Screen>
`;

exports[`PayoutAddress should render correctly when isUpdated is true 1`] = `
<Screen
  header={<PayoutAddressHeader />}
>
  <ForwardRef
    contentContainerStyle={
      {
        "alignItems": "center",
        "flexGrow": 1,
        "justifyContent": "center",
        "paddingLeft": 32,
        "paddingRight": 32,
      }
    }
  >
    <PeachText
      style={
        {
          "fontFamily": "Baloo2-Bold",
          "fontSize": 20,
          "letterSpacing": 0.2,
          "lineHeight": 32,
          "textAlign": "center",
        }
      }
    >
      set custom address
    </PeachText>
    <Input
      errorMessage=""
      onChange={[MockFunction]}
      placeholder="address label"
      style={
        {
          "marginTop": 16,
        }
      }
      value="addressLabel"
    />
    <BitcoinAddressInput
      errorMessage=""
      onChange={[MockFunction]}
      value="address"
    />
    <View
      style={
        {
          "flexDirection": "row",
          "fontFamily": "Baloo2-Bold",
          "fontSize": 20,
          "gap": 4,
          "justifyContent": "center",
          "letterSpacing": 0.2,
          "lineHeight": 32,
        }
      }
    >
      <PeachText
        style={
          {
            "fontFamily": "Baloo2-SemiBold",
            "fontSize": 14,
            "letterSpacing": 0.5,
            "lineHeight": 24,
            "textTransform": "uppercase",
          }
        }
      >
        address set
      </PeachText>
      <Icon
        color="#65A519"
        id="check"
        size={20}
      />
    </View>
  </ForwardRef>
  <PrimaryButton
    disabled={true}
    narrow={true}
    onPress={[MockFunction]}
    style={
      {
        "alignSelf": "center",
      }
    }
  >
    confirm
  </PrimaryButton>
</Screen>
`;

exports[`PayoutAddress should render correctly when type is refund 1`] = `
<Screen
  header={<PayoutAddressHeader />}
>
  <ForwardRef
    contentContainerStyle={
      {
        "alignItems": "center",
        "flexGrow": 1,
        "justifyContent": "center",
        "paddingLeft": 32,
        "paddingRight": 32,
      }
    }
  >
    <PeachText
      style={
        {
          "fontFamily": "Baloo2-Bold",
          "fontSize": 20,
          "letterSpacing": 0.2,
          "lineHeight": 32,
          "textAlign": "center",
        }
      }
    >
      set custom refund address
    </PeachText>
    <Input
      errorMessage=""
      onChange={[MockFunction]}
      placeholder="address label"
      style={
        {
          "marginTop": 16,
        }
      }
      value="addressLabel"
    />
    <BitcoinAddressInput
      errorMessage=""
      onChange={[MockFunction]}
      value="address"
    />
    <OpenWallet
      address="address"
      style={
        {
          "height": 24,
        }
      }
    />
  </ForwardRef>
  <PrimaryButton
    disabled={false}
    narrow={true}
    onPress={[MockFunction]}
    style={
      {
        "alignSelf": "center",
      }
    }
  >
    next
  </PrimaryButton>
</Screen>
`;
