// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RangeAmount should render correctly 1`] = `
<View
  style={
    [
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingLeft": 20,
        "paddingRight": 16,
      },
      undefined,
    ]
  }
>
  <View
    style={
      [
        {
          "alignItems": "flex-start",
          "flexShrink": 1,
          "gap": 8,
        },
        {
          "gap": 16,
        },
      ]
    }
  >
    <ParsedPeachText
      parse={
        [
          {
            "pattern": /buying/u,
            "style": {
              "color": "#05A85A",
            },
          },
        ]
      }
      style={
        [
          {
            "fontFamily": "Baloo2-Bold",
            "fontSize": 16,
            "letterSpacing": 0.16,
            "lineHeight": 26,
          },
          {
            "fontFamily": "Baloo2-Bold",
            "fontSize": 24,
            "letterSpacing": 0.24,
            "lineHeight": 32,
          },
        ]
      }
    >
      You're buying between:
    </ParsedPeachText>
    <CustomAmount
      amount={600000}
      onChange={[Function]}
      style={
        {
          "alignItems": "flex-start",
          "flexShrink": 1,
        }
      }
    />
    <PeachText
      style={
        [
          {
            "fontFamily": "Baloo2-Bold",
            "fontSize": 16,
            "letterSpacing": 0.16,
            "lineHeight": 26,
          },
          {
            "fontFamily": "Baloo2-Bold",
            "fontSize": 24,
            "letterSpacing": 0.24,
            "lineHeight": 32,
          },
        ]
      }
    >
      and
    </PeachText>
    <CustomAmount
      amount={60000}
      onChange={[Function]}
      style={
        {
          "alignItems": "flex-start",
          "flexShrink": 1,
        }
      }
    />
  </View>
  <SliderTrack
    onLayout={[Function]}
    style={
      {
        "height": "100%",
      }
    }
  >
    <TrackMarkers />
    <ForwardRef(AnimatedComponentWrapper)
      style={
        [
          {
            "backgroundColor": "#F56522",
            "left": 0,
            "opacity": 0.5,
            "position": "absolute",
            "right": 0,
          },
          {
            "height": 26,
            "top": 15,
          },
          {
            "transform": [
              {
                "translateY": 200,
              },
            ],
          },
        ]
      }
    />
    <ForwardRef(AnimatedComponentWrapper)
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        [
          {
            "alignItems": "center",
            "flexDirection": "row",
            "marginLeft": -24,
            "marginRight": -24,
            "paddingLeft": 24,
            "paddingRight": 24,
            "position": "absolute",
            "top": 0,
          },
          {
            "transform": [
              {
                "translateY": 200,
              },
            ],
          },
        ]
      }
    >
      <SliderKnob />
    </ForwardRef(AnimatedComponentWrapper)>
    <ForwardRef(AnimatedComponentWrapper)
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        [
          {
            "alignItems": "center",
            "flexDirection": "row",
            "marginLeft": -24,
            "marginRight": -24,
            "paddingLeft": 24,
            "paddingRight": 24,
            "position": "absolute",
            "top": 0,
          },
          {
            "transform": [
              {
                "translateY": 230,
              },
            ],
          },
        ]
      }
    >
      <SliderKnob />
    </ForwardRef(AnimatedComponentWrapper)>
  </SliderTrack>
</View>
`;
