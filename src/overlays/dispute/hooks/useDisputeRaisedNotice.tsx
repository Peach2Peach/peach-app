import { useCallback, useContext } from 'react'
import { Keyboard } from 'react-native'
import { Loading } from '../../../components'
import { OverlayContext } from '../../../contexts/overlay'
import { useNavigation, useValidatedState } from '../../../hooks'
import { useShowErrorBanner } from '../../../hooks/useShowErrorBanner'
import tw from '../../../styles/tailwind'
import { account } from '../../../utils/account'
import { getChat, saveChat } from '../../../utils/chat'
import { initDisputeSystemMessages } from '../../../utils/chat/initDisputeSystemMessages'
import { saveContract } from '../../../utils/contract'
import { isEmailRequiredForDispute } from '../../../utils/dispute'
import i18n from '../../../utils/i18n'
import { acknowledgeDispute } from '../../../utils/peachAPI/private/contract'
import DisputeRaisedNotice from '../components/DisputeRaisedNotice'

const emailRules = { required: true, email: true }

export const useDisputeRaisedNotice = () => {
  const navigation = useNavigation()
  const [, updateOverlay] = useContext(OverlayContext)
  const [email, setEmail, isEmailValid, emailErrors] = useValidatedState<string>('', emailRules)

  const showError = useShowErrorBanner()

  const closeOverlay = useCallback(() => {
    updateOverlay({ visible: false })
  }, [updateOverlay])

  const goToChat = useCallback(
    (contractId: string) => {
      navigation.navigate('contractChat', { contractId })
    },
    [navigation],
  )

  const submit = useCallback(
    async (contract: Contract, reason: DisputeReason, navigateChat?: boolean) => {
      if (isEmailRequiredForDispute(reason) && !isEmailValid) return

      updateOverlay({
        title: i18n('dispute.opened'),
        content: <Loading style={tw`self-center`} color={tw`text-black-1`.color} />,
        level: 'WARN',
        visible: true,
        requireUserAction: true,
        action1: {
          label: i18n('loading'),
          icon: 'clock',
          callback: () => {},
        },
      })
      const [result, err] = await acknowledgeDispute({
        contractId: contract.id,
        email,
      })
      if (result) {
        if (navigateChat) goToChat(contract.id)
        const updatedContract = {
          ...contract,
          disputeDate: new Date(),
          disputeInitiator: contract?.seller.id === account.publicKey ? contract.buyer.id : contract?.seller.id,
          disputeAcknowledgedByCounterParty: true,
        }
        saveContract(updatedContract)
        const chat = getChat(contract.id)
        const autogeneratedMessages = initDisputeSystemMessages(chat.id, updatedContract as Contract)
        saveChat(contract.id, {
          messages: autogeneratedMessages,
        })
        if (isEmailRequiredForDispute(reason)) {
          Keyboard.dismiss()
        }
      } else if (err) {
        showError(err.error)
      }
      if (navigateChat) {
        navigation.replace('contractChat', { contractId: contract.id })
      } else {
        navigation.replace('contract', { contractId: contract.id })
      }
      closeOverlay()
    },
    [closeOverlay, email, goToChat, isEmailValid, navigation, showError, updateOverlay],
  )

  const showDisputeRaisedNotice = useCallback(
    (contract: Contract, view: ContractViewer) => {
      updateOverlay({
        title: i18n('dispute.opened'),
        level: 'WARN',
        content: (
          <DisputeRaisedNotice
            submit={submit}
            contract={contract}
            view={view}
            email={email}
            setEmail={setEmail}
            emailErrors={emailErrors}
            disputeReason={contract.disputeReason ?? 'other'}
          />
        ),
        visible: true,
        action2: !isEmailRequiredForDispute(contract.disputeReason ?? 'other')
          ? {
            label: i18n('close'),
            icon: 'xSquare',
            callback: () => submit(contract, contract.disputeReason ?? 'other'),
          }
          : undefined,
        action1: isEmailRequiredForDispute(contract.disputeReason ?? 'other')
          ? {
            label: i18n('send'),
            icon: 'arrowRightCircle',
            callback: () => {
              submit(contract, contract.disputeReason ?? 'other')
              navigation.replace('contract', { contractId: contract.id })
            },
          }
          : {
            label: i18n('goToChat'),
            icon: 'messageCircle',
            callback: async () => {
              await submit(contract, contract.disputeReason ?? 'other', true)
            },
          },
      })
    },
    [email, emailErrors, navigation, setEmail, submit, updateOverlay],
  )

  return showDisputeRaisedNotice
}
