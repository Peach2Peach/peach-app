import { useCallback } from 'react'
import { Keyboard } from 'react-native'
import { Loading } from '../../../../components/animation'
import { useOverlayContext } from '../../../../contexts/overlay'
import { useShowErrorBanner } from '../../../../hooks/useShowErrorBanner'
import tw from '../../../../styles/tailwind'
import { account } from '../../../../utils/account'
import { getChat, saveChat } from '../../../../utils/chat'
import { initDisputeSystemMessages } from '../../../../utils/chat/initDisputeSystemMessages'
import { saveContract } from '../../../../utils/contract'
import { isEmailRequiredForDispute } from '../../../../utils/dispute'
import i18n from '../../../../utils/i18n'
import { acknowledgeDispute } from '../../../../utils/peachAPI/private/contract'
import { isEmail } from '../../../../utils/validation'

export const useSubmitDisputeAcknowledgement = () => {
  const [, updateOverlay] = useOverlayContext()
  const showError = useShowErrorBanner()

  const closeOverlay = useCallback(() => {
    updateOverlay({ visible: false })
  }, [updateOverlay])

  const submitDisputeAcknowledgement = useCallback(
    async (contract: Contract, reason: DisputeReason, email: string) => {
      if (isEmailRequiredForDispute(reason) && !isEmail(email)) return

      updateOverlay({
        title: i18n('dispute.opened'),
        content: <Loading style={tw`self-center`} color={tw`text-black-1`.color} />,
        level: 'WARN',
        visible: true,
        requireUserAction: true,
        action1: {
          label: i18n('loading'),
          icon: 'clock',
          callback: () => {},
        },
      })
      const [result, err] = await acknowledgeDispute({
        contractId: contract.id,
        email,
      })
      if (result) {
        const updatedContract = {
          ...contract,
          disputeDate: new Date(),
          disputeInitiator: contract?.seller.id === account.publicKey ? contract.buyer.id : contract?.seller.id,
          disputeAcknowledgedByCounterParty: true,
        }
        saveContract(updatedContract)
        const chat = getChat(contract.id)
        const autogeneratedMessages = initDisputeSystemMessages(chat.id, updatedContract as Contract)
        saveChat(contract.id, {
          messages: autogeneratedMessages,
        })
        if (isEmailRequiredForDispute(reason)) {
          Keyboard.dismiss()
        }
      } else if (err) {
        showError(err.error)
      }
      closeOverlay()
    },
    [closeOverlay, showError, updateOverlay],
  )

  return submitDisputeAcknowledgement
}
